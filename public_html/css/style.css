@charset "UTF-8";
/*------------------------------------*\ STYLE.CSS
\*------------------------------------*/
/**  sass --watch style.scss:style.min.css --style compressed  Here we pull in some variables, include the inuit.css framework, then add our project-specific components afterwards. */
/** Setup */
/*------------------------------------*\ $VARS
\*------------------------------------*/
/** Set up project-specific variables here which are then used throughout your build. These variables are automatically picked up by inuit.css so you should never need to modify any framework code. */
/** Debug mode will visually highlight any potential markup/accessibility quirks in the browser. Set to `true` or `false`. */
/** Do you want all elements to adopt `box-sizing:border-box;` as per paulirish.com/2012/box-sizing-border-box-ftw ? */
/** Would you like to use Adam Whitcroft’s Batch icon font, as per: adamwhitcroft.com/batch ? */
/** Base stuff */
/** How big would you like round corners to be by default? */
/** Responsiveness? */
/** Responsiveness for widescreen/high resolution desktop monitors and beyond? Note: $responsive parameter above must be enabled before enabling this. */
/** Responsive push and pull produce a LOT of code, only turn them on if you definitely need them. */
/** Tell inuit.css when breakpoints start. */
/* 768/16 = 48  */
/* 1024/16 = 64  */
/* 1200/16 = 75  */
/** Font-sizes (in pixels). Refer to relevant sections for their implementations. */
/** English quote marks? */
/** If you want English quotes then please do not edit these; they’re only here because Sass needs them. */
/** If you need non-English quotes, please alter the following values accordingly: */
/** Brand stuff */
/** inuit.css will work these next ones out for you.  Assign our `$base-line-height` to a new spacing var for more transparency. */
/*------------------------------------*\ INUIT.CSS
\*------------------------------------*/
/**
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */
/** inuit.css acts as a base stylesheet which you should extend with your own theme stylesheet.  inuit.css aims to do the heavy lifting; sorting objects and abstractions, design patterns and fiddly bits of CSS, whilst leaving as much design as possible to you. inuit.css is the scaffolding to your decorator.  This stylesheet is heavily documented and contains lots of comments, please take care to read and refer to them as you build. For further support please tweet at @inuitcss.  Owing to the amount of comments please only ever use minified CSS in production. This file is purely a dev document.  The table of contents below maps to section titles of the same name, to jump to any section simply run a find for $[SECTION-TITLE].  Most objects and abstractions come with a chunk of markup that you should be able to paste into any view to quickly see how the CSS works in conjunction with the correct HTML.  inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines  LICENSE  Copyright 2012 Harry Roberts  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Thank you for choosing inuit.css. May your floats remain cleared. */
/*------------------------------------*\ $CONTENTS
\*------------------------------------*/
/** CONTENTS............You’re reading it! WARNING.............Here be dragons! IMPORTS.............Begin importing the sections below  MIXINS..............Super-simple Sass stuff NORMALIZE...........normalize.css RESET...............Set some defaults CLEARFIX............ SHARED..............Shared declarations  MAIN................High-level elements like `html`, `body`, etc. HEADINGS............Double-stranded heading hierarchy PARAGRAPHS.......... SMALLPRINT..........Smaller text elements like `small` QUOTES.............. CODE................ LINKS............... LISTS............... IMAGES.............. TABLES.............. FORMS...............  GRIDS...............Fluid, proportional and nestable grids FLEXBOX.............Crudely emulate flexbox COLUMNS.............CSS3 columns NAV.................A simple abstraction to put a list in horizontal nav mode OPTIONS.............Grouped nav items PAGINATION..........Very stripped back, basic paginator BREADCRUMB..........Simple breadcrumb trail object MEDIA...............Media object MARGINALIA..........Simple marginalia content ISLAND..............Boxed off content BLOCK-LIST..........Blocky lists of content MATRIX..............Gridded lists SPLIT...............A simple split-in-two object THIS-OR-THIS........Options object LINK-COMPLEX........ FLYOUT..............Flyout-on-hover object ARROWS..............CSS arrows SPRITE..............Generic spriting element ICON-TEXT...........Icon and text couplings BUTTONS............. LOZENGES............Basic lozenge styles RULES...............Horizontal rules STATS...............Simple stats object GREYBOX.............Wireframing styles BATCH...............Batch icon font  WIDTHS..............Width classes for use alongside the grid system etc. PUSH................Push classes for manipulating grids PULL................Pull classes for manipulating grids BRAND...............Helper class to apply brand treatment to elements HELPER..............A series of helper classes to use arbitrarily DEBUG...............Enable to add visual flags for debugging purposes */
/*------------------------------------*\ $WARNING
\*------------------------------------*/
/* inuit.css, being an OO framework, works in keeping with the open/closed principle. The variables you set previously are now being used throughout inuit.css to style everything we need for a base. Any custom styles SHOULD NOT be added or modified in inuit.css directly, but added via your theme stylesheet as per the open/closed principle:  csswizardry.com/2012/06/the-open-closed-principle-applied-to-css  Try not to edit any CSS beyond this point; if you find you need to do so it is a failing of the framework so please tweet at @inuitcss. */
/*------------------------------------*\ $IMPORTS
\*------------------------------------*/
/** Generic utility styles etc. */
/*------------------------------------*\ $MIXINS
\*------------------------------------*/
/** Create a fully formed type style (sizing and vertical rhythm) by passing in a single value, e.g.:  `@include font-size(10px);`  Thanks to @redclov3r for the `line-height` Sass: twitter.com/redclov3r/status/250301539321798657 */
/** Create vendor-prefixed CSS in one go, e.g.  `@include vendor(border-radius, 4px);`  */
/** Create CSS keyframe animations for all vendors in one go, e.g.:  .foo{ @include vendor(animation, shrink 3s); }
 @include keyframe(shrink){ from{ font-size:5em; } }  Courtesy of @integralist: twitter.com/integralist/status/260484115315437569 */
/** Force overly long spans of text to truncate, e.g.:  `@include truncate(100%);`  Where `$truncation-boundary` is a united measurement. */
/** CSS arrows!!! But... before you read on, you might want to grab a coffee...  This mixin creates a CSS arrow on a given element. We can have the arrow appear in one of 12 locations, thus:  01    02    03 +------------------+ 12 |                  | 04 |                  | 11 |                  | 05 |                  | 10 |                  | 06 +------------------+ 09    08    07  You pass this position in along with a desired arrow color and optional border color, for example:  `@include arrow(top, left, red)`  for just a single, red arrow, or:  `@include arrow(bottom, center, red, black)`  which will create a red triangle with a black border which sits at the bottom center of the element. Call the mixin thus:  .foo{ background-color:#BADA55; border:1px solid #ACE; @include arrow(top, left, #BADA55, #ACE); }  */
/** Media query mixin.  It’s not great practice to define solid breakpoints up-front, preferring to modify your design when it needs it, rather than assuming you’ll want a change at ‘mobile’. However, as inuit.css is required to take a hands off approach to design decisions, this is the closest we can get to baked-in responsiveness. It’s flexible enough to allow you to set your own breakpoints but solid enough to be frameworkified.  We define some broad breakpoints in our vars file that are picked up here for use in a simple media query mixin. Our options are:  palm lap lap-and-up portable desk desk-wide  Not using a media query will, naturally, serve styles to all devices.  `@include media-query(palm){ [styles here] }`  We work out your end points for you: */
/* normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ========================================================================== HTML5 display definitions ========================================================================== */
/* Correct `block` display not defined in IE 8/9. */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary { display: block; }

/* Correct `inline-block` display not defined in IE 8/9. */
audio, canvas, video { display: inline-block; }

/* Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) { display: none; height: 0; }

/* Address styling not present in IE 8/9. */
[hidden] { display: none; }

/* ========================================================================== Base ========================================================================== */
/* 1. Set default font family to sans-serif. 2. Prevent iOS text size adjust after orientation change, without disabling user zoom. */
html { font-family: sans-serif; /* 1 */ -webkit-text-size-adjust: 100%; /* 2 */ -ms-text-size-adjust: 100%; /* 2 */ }

/* Remove default margin. */
body { margin: 0; }

/* ========================================================================== Links ========================================================================== */
/* Address `outline` inconsistency between Chrome and other browsers. */
a:focus { outline: thin dotted; }

/* Improve readability when focused and also mouse hovered in all browsers. */
a:active, a:hover { outline: 0; }

/* ========================================================================== Typography ========================================================================== */
/* Address variable `h1` font-size and margin within `section` and `article` contexts in Firefox 4+, Safari 5, and Chrome. */
h1 { font-size: 2em; margin: 0.67em 0; }

/* Address styling not present in IE 8/9, Safari 5, and Chrome. */
abbr[title] { border-bottom: 1px dotted; }

/* Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome. */
b, strong { font-weight: bold; }

/* Address styling not present in Safari 5 and Chrome. */
dfn { font-style: italic; }

/* Address differences between Firefox and other browsers. */
hr { -moz-box-sizing: content-box; box-sizing: content-box; height: 0; }

/* Address styling not present in IE 8/9. */
mark { background: #ff0; color: #000; }

/* Correct font family set oddly in Safari 5 and Chrome. */
code, kbd, pre, samp { font-family: monospace, serif; font-size: 1em; }

/* Improve readability of pre-formatted text in all browsers. */
pre { white-space: pre-wrap; }

/* Set consistent quote types. */
q { quotes: "\201C" "\201D" "\2018" "\2019"; }

/* Address inconsistent and variable font size in all browsers. */
small { font-size: 80%; }

/* Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

/* ========================================================================== Embedded content ========================================================================== */
/* Remove border when inside `a` element in IE 8/9. */
img { border: 0; }

/* Correct overflow displayed oddly in IE 9. */
svg:not(:root) { overflow: hidden; }

/* ========================================================================== Figures ========================================================================== */
/* Address margin not present in IE 8/9 and Safari 5. */
figure { margin: 0; }

/* ========================================================================== Forms ========================================================================== */
/* Define consistent border, margin, and padding. */
fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }

/* 1. Correct `color` not being inherited in IE 8/9. 2. Remove padding so people aren't caught out if they zero out fieldsets. */
legend { border: 0; /* 1 */ padding: 0; /* 2 */ }

/* 1. Correct font family not being inherited in all browsers. 2. Correct font size not being inherited in all browsers. 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome. */
button, input, select, textarea { font-family: inherit; /* 1 */ font-size: 100%; /* 2 */ margin: 0; /* 3 */ }

/* Address Firefox 4+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
button, input { line-height: normal; }

/* Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+. Correct `select` style inheritance in Firefox 4+ and Opera. */
button, select { text-transform: none; }

/* 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. */
button, html input[type="button"], input[type="reset"], input[type="submit"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ }

/* Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] { cursor: default; }

/* 1. Address box sizing set to `content-box` in IE 8/9. 2. Remove excess padding in IE 8/9. */
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ }

/* 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome. 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome (include `-moz` to future-proof). */
input[type="search"] { -webkit-appearance: textfield; /* 1 */ -moz-box-sizing: content-box; -webkit-box-sizing: content-box; /* 2 */ box-sizing: content-box; }

/* Remove inner padding and search cancel button in Safari 5 and Chrome on OS X. */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/* Remove inner padding and border in Firefox 4+. */
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

/* 1. Remove default vertical scrollbar in IE 8/9. 2. Improve readability and alignment in all browsers. */
textarea { overflow: auto; /* 1 */ vertical-align: top; /* 2 */ }

/* ========================================================================== Tables ========================================================================== */
/* Remove most spacing between table cells. */
table { border-collapse: collapse; border-spacing: 0; }

/*------------------------------------*\ $RESET
\*------------------------------------*/
/** A more considered reset; more of a restart... As per: csswizardry.com/2011/10/reset-restarted */
/**
* Let’s make the box model all nice, shall we…?
*/
*, *:before, *:after { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -o-box-sizing: border-box; box-sizing: border-box; }

/** The usual... */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, dl, dd, ol, ul, form, fieldset, legend, table, th, td, caption, hr { margin: 0; padding: 0; }

/** Give a help cursor to elements that give extra info on `:hover`. */
abbr[title], dfn[title] { cursor: help; }

/** Remove underlines from potentially troublesome elements. */
a, u, ins { text-decoration: none; }

/** Apply faux underline via `border-bottom`. */
ins { border-bottom: 1px solid; }

/** So that `alt` text is visually offset if images don’t load. */
img { font-style: italic; }

/** Give form elements some cursor interactions... */
label, input, textarea, button, select, option { cursor: pointer; }

.text-input:active, .text-input:focus, textarea:active, textarea:focus { cursor: text; outline: none; }

/*------------------------------------*\ $CLEARFIX
\*------------------------------------*/
/** Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php Extend the clearfix class with Sass to avoid the `.cf` class appearing over and over in your markup. */
.cf:after, .nav:after, .media:after, .island:after, .islet:after, .matrix:after, .multi-list:after, .stat-group:after { content: ""; display: table; clear: both; }

/*------------------------------------*\ $SHARED
\*------------------------------------*/
/** Where `margin-bottom` is concerned, this value will be the same as the base line-height. This allows us to keep a consistent vertical rhythm. As per: csswizardry.com/2012/06/single-direction-margin-declarations */
/** Base elements */
h1, h2, h3, h4, h5, h6, hgroup, ul, ol, dl, blockquote, p, address, table, fieldset, figure, pre, .form-fields > li, .media, .island, .islet { margin-bottom: 16px; margin-bottom: 1rem; }
.islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet hgroup, .islet ul, .islet ol, .islet dl, .islet blockquote, .islet p, .islet address, .islet table, .islet fieldset, .islet figure, .islet pre, .islet .form-fields > li, .islet .media, .islet .island, .islet .islet { margin-bottom: 8px; margin-bottom: 0.5rem; }

/** Doubled up `margin-bottom` helper class. */
.landmark { margin-bottom: 32px; margin-bottom: 2rem; }

/** `hr` elements only take up a few pixels, so we need to give them special treatment regarding vertical rhythm. */
hr { margin-bottom: 14px; margin-bottom: 0.875rem; }

/** Where `margin-left` is concerned we want to try and indent certain elements by a consistent amount. Define that amount once, here. */
ul, ol, dd { margin-left: 32px; margin-left: 2rem; }

/** Base styles; unclassed HTML elements etc. */
/*------------------------------------*\ $MAIN
\*------------------------------------*/
html { font: 1em/1.5 serif; overflow-y: scroll; min-height: 100%; }

/*------------------------------------*\ $HEADINGS
\*------------------------------------*/
/** As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css  When we define a heading we also define a corresponding class to go with it. This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded heading hierarchy. */
h1, .alpha { font-size: 36px; font-size: 2.25rem; line-height: 1.33333; }

h2, .beta { font-size: 30px; font-size: 1.875rem; line-height: 1.6; }

h3, .gamma { font-size: 24px; font-size: 1.5rem; line-height: 1; }

h4, .delta { font-size: 20px; font-size: 1.25rem; line-height: 1.2; }

h5, .epsilon { font-size: 16px; font-size: 1rem; line-height: 1.5; }

h6, .zeta { font-size: 14px; font-size: 0.875rem; line-height: 1.71429; }

/** Heading groups and generic any-heading class. To target any heading of any level simply apply a class of `.hN`, e.g.:  <hgroup> <h1 class=hN>inuit.css</h1> <h2 class=hN>Best. Framework. Ever!</h2> </hgroup>  */
hgroup .hN { margin-bottom: 0; }

/** A series of classes for setting massive type; for use in heroes, mastheads, promos, etc. */
.giga { font-size: 96px; font-size: 6rem; line-height: 1; }

.mega { font-size: 72px; font-size: 4.5rem; line-height: 1; }

.kilo { font-size: 48px; font-size: 3rem; line-height: 1; }

/*------------------------------------*\ $PARAGRAPHS
\*------------------------------------*/
/** The `.lede` class is used to make the introductory text (usually a paragraph) of a document slightly larger. */
.lede, .lead { font-size: 18px; font-size: 1.125rem; line-height: 1.33333; }

/*------------------------------------*\ $SMALLPRINT
\*------------------------------------*/
/** A series of classes for setting tiny type; for use in smallprint etc. */
.smallprint, .milli { font-size: 12px; font-size: 0.75rem; line-height: 2; }

.micro { font-size: 10px; font-size: 0.625rem; line-height: 2.4; }

/*------------------------------------*\ $QUOTES
\*------------------------------------*/
/** If English quotes are set in `_vars.scss`, define them here. */
/** Big up @boblet: html5doctor.com/blockquote-q-cite */
/** Inline quotes. */
q { quotes: "‘" "’" "“" "”"; }
q:before { content: "‘"; content: open-quote; }
q:after { content: "’"; content: close-quote; }
q q:before { content: "“"; content: open-quote; }
q q:after { content: "”"; content: close-quote; }

blockquote { quotes: "“" "”"; }
blockquote p:before { content: "“"; content: open-quote; }
blockquote p:after { content: ""; content: no-close-quote; }
blockquote p:last-of-type:after { content: "”"; content: close-quote; }
blockquote q:before { content: "‘"; content: open-quote; }
blockquote q:after { content: "’"; content: close-quote; }

/**  <blockquote> <p>Insanity: doing the same thing over and over again and expecting different results.</p> <b class=source>Albert Einstein</b> </blockquote>  */
blockquote { /** .4em is roughly equal to the width of the opening “ that we wish to hang. */ text-indent: -0.41em; }
blockquote p:last-of-type { margin-bottom: 0; }

.source { display: block; text-indent: 0; }
.source:before { content: "—"; }

/*------------------------------------*\ $CODE
\*------------------------------------*/
/** Use an explicit font stack to ensure browsers render correct `line-height`. */
pre { overflow: auto; }

pre mark { background: none; border-bottom: 1px solid; color: inherit; }

/** Add comments to your code examples, e.g.:  <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>  */
.code-comment { /** Override this setting in your theme stylesheet */ opacity: 0.75; filter: alpha(opacity=75); }

/** You can add line numbers to your code examples but be warned, it requires some pretty funky looking markup, e.g.:  <ol class=line-numbers> <li><code>.nav{</code></li> <li><code>    list-style:none;</code></li> <li><code>    margin-left:0;</code></li> <li><code>}</code></li> <li><code>    .nav > li,</code></li> <li><code>        .nav > li > a{</code></li> <li><code>            display:inline-block;</code></li> <li><code>           *display:inline-block;</code></li> <li><code>            zoom:1;</code></li> <li><code>        }</code></li> </ol>  1. Make the list look like code. 2. Give the list flush numbers with a leading zero. 3. Make sure lines of code don’t wrap. 4. Give the code form by forcing the `code` to honour white-space. */
.line-numbers { font-family: monospace, serif; /* [1] */ list-style: decimal-leading-zero inside; /* [2] */ white-space: nowrap; /* [3] */ overflow: auto; /* [3] */ margin-left: 0; }

.line-numbers code { white-space: pre; /* [4] */ }

/*------------------------------------*\ $LINKS
\*------------------------------------*/
/** Say no to negative hovers, as per: csswizardry.com/2011/05/on-negative-hovers  Sometimes, particularly on larger projects, it is useful to scope link styling only to anchors which have `href` attributes. */
a { /** Set colors etc in your theme stylesheet. */ }
a:hover, a:active, a:focus { text-decoration: underline; }

/** ‘Current’ states, e.g.:  <ul class=nav> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li class=current><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  */
.current > a { cursor: text; text-decoration: underline; }

/*------------------------------------*\ $IMAGES
\*------------------------------------*/
/** Demo: jsfiddle.net/inuitcss/yMtur */
/** Fluid images. */
img { max-width: 100%; }

/** Non-fluid images if you specify `width` and/or `height` attributes. */
img[width], img[height] { max-width: none; }

/** Image placement variations. */
.img--right { float: right; margin-bottom: 16px; margin-left: 16px; }

.img--left { float: left; margin-right: 16px; margin-bottom: 16px; }

.img--center { display: block; margin-right: auto; margin-bottom: 16px; margin-left: auto; }

/** Keep your images on your baseline.  Please note, these will not work too nicely with fluid images and will distort when resized below a certain width. Use with caution. */
.img--short { height: 80px; }

.img--medium { height: 160px; }

.img--tall { height: 240px; }

/** Images in `figure` elements. */
figure > img { display: block; }

/*------------------------------------*\ $LISTS
\*------------------------------------*/
/** Remove vertical spacing from nested lists. */
li > ul, li > ol { margin-bottom: 0; }

/** Have a numbered `ul` without the semantics implied by using an `ol`. */
/*ul*/
.numbered-list { list-style-type: decimal; }

/*------------------------------------*\ $TABLES
\*------------------------------------*/
/** We have a lot at our disposal for making very complex table constructs, e.g.:  <table class="table--bordered  table--striped  table--data"> <colgroup> <col class=t10> <col class=t10> <col class=t10> <col> </colgroup> <thead> <tr> <th colspan=3>Foo</th> <th>Bar</th> </tr> <tr> <th>Lorem</th> <th>Ipsum</th> <th class=numerical>Dolor</th> <th>Sit</th> </tr> </thead> <tbody> <tr> <th rowspan=3>Sit</th> <td>Dolor</td> <td class=numerical>03.788</td> <td>Lorem</td> </tr> <tr> <td>Dolor</td> <td class=numerical>32.210</td> <td>Lorem</td> </tr> <tr> <td>Dolor</td> <td class=numerical>47.797</td> <td>Lorem</td> </tr> <tr> <th rowspan=2>Sit</th> <td>Dolor</td> <td class=numerical>09.640</td> <td>Lorem</td> </tr> <tr> <td>Dolor</td> <td class=numerical>12.117</td> <td>Lorem</td> </tr> </tbody> </table>  */
table { width: 100%; }

th, td { padding: 4px; text-align: left; }
@media screen and (min-width: 480px) { th, td { padding: 8px; } }

/** Cell alignments */
[colspan] { text-align: center; }

[colspan="1"] { text-align: left; }

[rowspan] { vertical-align: middle; }

[rowspan="1"] { vertical-align: top; }

.numerical { text-align: right; }

/** In the HTML above we see several `col` elements with classes whose numbers represent a percentage width for that column. We leave one column free of a class so that column can soak up the effects of any accidental breakage in the table. */
.t5 { width: 5%; }

.t10 { width: 10%; }

.t12 { width: 12.5%; }

/* 1/8 */
.t15 { width: 15%; }

.t20 { width: 20%; }

.t25 { width: 25%; }

/* 1/4 */
.t30 { width: 30%; }

.t33 { width: 33.333%; }

/* 1/3 */
.t35 { width: 35%; }

.t37 { width: 37.5%; }

/* 3/8 */
.t40 { width: 40%; }

.t45 { width: 45%; }

.t50 { width: 50%; }

/* 1/2 */
.t55 { width: 55%; }

.t60 { width: 60%; }

.t62 { width: 62.5%; }

/* 5/8 */
.t65 { width: 65%; }

.t66 { width: 66.666%; }

/* 2/3 */
.t70 { width: 70%; }

.t75 { width: 75%; }

/* 3/4*/
.t80 { width: 80%; }

.t85 { width: 85%; }

.t87 { width: 87.5%; }

/* 7/8 */
.t90 { width: 90%; }

.t95 { width: 95%; }

/** Bordered tables */
.table--bordered th, .table--bordered td { border: 1px solid #ccc; /* Override this color in your theme stylesheet */ }
.table--bordered th:empty, .table--bordered td:empty { border: none; }
.table--bordered thead tr:last-child th { border-bottom-width: 2px; }
.table--bordered tbody tr th:last-of-type { border-right-width: 2px; }

/** Striped tables */
.table--striped tbody tr:nth-of-type(odd) { background-color: #ffc; /* Override this color in your theme stylesheet */ }

/** Data table */
.table--data { font: 12px/1.5 sans-serif; }

/*------------------------------------*\ $FORMS
\*------------------------------------*/
/**  Demo: jsfiddle.net/inuitcss/MhHHU  */
fieldset { padding: 16px; }

/** Text inputs  Instead of a `[type]` selector for each kind of form input, we just use a class to target any/every one, e.g.: <input type=text class=text-input> <input type=email class=text-input> <input type=password class=text-input>  */
.text-input, textarea { /** Style these via your theme stylesheet. */ }

/** Group sets of form fields in a list, e.g.:  <ul class=form-fields> <li> <label /> <input /> </li> <li> <label /> <select /> </li> <li> <label /> <input /> </li> </ul>  */
.form-fields { list-style: none; margin: 0; }

.form-fields > li:last-child { margin-bottom: 0; }

/** Labels  Define a `.label` class as well as a `label` element. This means we can apply label-like styling to meta-labels for groups of options where a `label` element is not suitable, e.g.:  <li> <span class=label>Select an option below:</span> <ul class="multi-list  four-cols"> <li> <input /> <label /> </li> <li> <input /> <label /> </li> <li> <input /> <label /> </li> <li> <input /> <label /> </li> </ul> </li>  */
label, .label { display: block; }

/** Extra help text in `label`s, e.g.:  <label>Card number <small class=additional>No spaces</small></label>  */
.additional { display: block; font-weight: normal; }

/* Groups of checkboxes and radios, e.g.:  <li> <ul class=check-list> <li> <input /> <label /> </li> <li> <input /> <label /> </li> </ul> </li>  */
.check-list { list-style: none; margin: 0; }

/* Labels in check-lists */
.check-label, .check-list label, .check-list .label { display: inline-block; }

/** Spoken forms are for forms that read like spoken word, e.g.:  <li class=spoken-form> Hello, my <label for=spoken-name>name</label> is <input type=text class=text-input id=spoken-name>. My home <label for=country>country</label> is <select id=country> <option>UK</option> <option>US</option> <option>Other</option> </select> </li>  */
.spoken-form label { display: inline-block; font: inherit; }

/** Extra help text displayed after a field when that field is in focus, e.g.:  <label for=email>Email:</label> <input type=email class=text-input id=email> <small class=extra-help>.edu emails only</small>  We leave the help text in the document flow and merely set it to `visibility:hidden;`. This means that it won’t interfere with anything once it reappears.  */
/*small*/
.extra-help { display: inline-block; visibility: hidden; }

.text-input:active + .extra-help, .text-input:focus + .extra-help { visibility: visible; }

/** Objects and abstractions  Single-line comment (//) out any objects you do not need in your project. */
/*------------------------------------*\ $GRIDS
\*------------------------------------*/
/** Fluid and nestable grid system, e.g.:  <div class="grid">
 <div class="grid__item  one-third"> <p>One third grid</p> </div>
 <div class="grid__item  two-thirds"> <p>Two thirds grid</p> </div>
 <div class="grid__item  one-half"> <p>One half grid</p> </div>
 <div class="grid__item  one-quarter"> <p>One quarter grid</p> </div>
 <div class="grid__item  one-quarter"> <p>One quarter grid</p> </div>
 </div>  Demo: jsfiddle.net/inuitcss/CLYUC  */
/** Grid wrapper */
.grid { margin-left: -16px; list-style: none; margin-bottom: 0; letter-spacing: -0.31em; word-spacing: -0.43em; }

/** Very infrequently occuring grid wrappers as children of grid wrappers. */
.grid > .grid { margin-left: 0; }

/** Grid */
.grid__item { display: inline-block; width: 100%; padding-left: 16px; vertical-align: top; letter-spacing: normal; word-spacing: normal; *display: inline; zoom: 1; }

/*------------------------------------*\ $FLEXBOX
\*------------------------------------*/
/** Until we can utilise flexbox natively we can kinda, sorta, attempt to emulate it, in a way... e.g.:  <header class=flexbox>
 <div class=flexbox__item> <b>Welcome to</b> </div>
 <div class=flexbox__item> <img src="//csswizardry.com/inuitcss/img/logo.jpg" alt="inuit.css"> </div>
 </header>  We can also combine our grid system classes with `.flexbox__item` classes, e.g.:  <div class=flexbox> <div class="flexbox__item  one-quarter"> </div> <div class="flexbox__item  three-quarters"> </div> </div>  It’s pretty poorly named I’m afraid, but it works…  Demo: jsfiddle.net/inuitcss/ufUh2  */
.flexbox { display: table; width: 100%; }

/** Nasty hack to circumvent Modernizr conflicts. */
html.flexbox { display: block; width: auto; }

.flexbox__item { display: table-cell; vertical-align: middle; }

/*------------------------------------*\ $COLUMNS
\*------------------------------------*/
/** Here we can set elements in columns of text using CSS3, e.g.:  <p class=text-cols--2>  Demo: jsfiddle.net/inuitcss/E26Yd  */
.text-cols--2, .text-cols--3, .text-cols--4, .text-cols--5 { -webkit-column-gap: 16px; -moz-column-gap: 16px; -ms-column-gap: 16px; -o-column-gap: 16px; column-gap: 16px; }

.text-cols--2 { -webkit-column-count: 2; -moz-column-count: 2; -ms-column-count: 2; -o-column-count: 2; column-count: 2; }

.text-cols--3 { -webkit-column-count: 3; -moz-column-count: 3; -ms-column-count: 3; -o-column-count: 3; column-count: 3; }

.text-cols--4 { -webkit-column-count: 4; -moz-column-count: 4; -ms-column-count: 4; -o-column-count: 4; column-count: 4; }

.text-cols--5 { -webkit-column-count: 5; -moz-column-count: 5; -ms-column-count: 5; -o-column-count: 5; column-count: 5; }

/*------------------------------------*\ $NAV
\*------------------------------------*/
/** Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction When used on an `ol` or `ul`, this class throws the list into horizontal mode e.g.:  <ul class=nav> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  Demo: jsfiddle.net/inuitcss/Vnph4  */
.nav { list-style: none; margin-left: 0; }
.nav > li, .nav > li > a { display: inline-block; *display: inline; zoom: 1; }

/** `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:  <ul class="nav  nav--stacked"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  */
.nav--stacked > li { display: list-item; }
.nav--stacked > li > a { display: block; }

/** `.nav--banner` extends `.nav` and centres the list, e.g.:  <ul class="nav  nav--banner"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  */
.nav--banner { text-align: center; }

/** Give nav links a big, blocky hit area. Extends `.nav`, e.g.:  <ul class="nav  nav--block"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  */
.nav--block, .options { line-height: 1; /** Remove whitespace caused by `inline-block`. */ letter-spacing: -0.31em; word-spacing: -0.43em; white-space: nowrap; }
.nav--block > li, .options > li { letter-spacing: normal; word-spacing: normal; }
.nav--block > li > a, .options > li > a { padding: 8px; }

/** Force a nav to occupy 100% of the available width of its parent. Extends `.nav`, e.g.:  <ul class="nav  nav--fit"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  Thanks to @pimpl for this idea! */
.nav--fit { display: table; width: 100%; }
.nav--fit > li { display: table-cell; }
.nav--fit > li > a { display: block; }

/** Make a list of keywords. Extends `.nav`, e.g.:  `<ul class="nav  nav--keywords>`  */
.nav--keywords > li:after { content: ", "; }
.nav--keywords > li:last-child:after { display: none; }

/*------------------------------------*\ $OPTIONS
\*------------------------------------*/
/** Link-group nav, used for displaying related options. Extends `.nav--block` but could also extend `.nav--fit`. Extend with colours and ‘current states’ in your theme stylesheet.  <ul class="nav  options"> <li><a></a></li> <li><a></a></li> <li><a></a></li> <li><a></a></li> </ul>  Demo: jsfiddle.net/inuitcss/vwfaf  */
.options > li > a { border: 0 solid #ccc; /* Extend in your theme stylesheet */ border-width: 1px; border-left-width: 0; }
.options > li:first-child > a { border-left-width: 1px; border-top-left-radius: 4px; border-bottom-left-radius: 4px; }
.options > li:last-child > a { border-top-right-radius: 4px; border-bottom-right-radius: 4px; }

/*------------------------------------*\ $PAGINATION
\*------------------------------------*/
/** Basic pagination object, extends `.nav`. Requires some funky commenting to collapse any white-space caused by the `display:inline-block;` rules.  <ol class="nav  pagination"> <li class=pagination__first>First</li> <li class=pagination__prev>Previous</li> <li><a href=/page/1>1</a></li> <li><a href=/page/2>2</a></li> <li class=current><a href=/page/3>3</a></li> <li><a href=/page/4>4</a></li> <li><a href=/page/5>5</a></li> <li class=pagination__next><a href=/page/next>Next</a></li> <li class=pagination__last><a href=/page/last>Last</a></li> </ol>  Demo: jsfiddle.net/inuitcss/9Y6PU  */
.pagination { text-align: center; /** Remove whitespace caused by `inline-block`. */ letter-spacing: -0.31em; word-spacing: -0.43em; }

.pagination > li { padding: 8px; letter-spacing: normal; word-spacing: normal; }

.pagination > li > a { padding: 8px; margin: -8px; }

.pagination__first a:before { content: "« "; }

.pagination__last a:after { content: " »"; }

/*------------------------------------*\ $BREADCRUMB
\*------------------------------------*/
/** Simple breadcrumb styling to apply to (ordered) lists. Extends `.nav`, e.g.:  <ol class="nav  breadcrumb"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>The Board</a></li> <li class=current><a href=#>Directors</a></li> </ol>  Demo: jsfiddle.net/inuitcss/rkAY9  */
.breadcrumb > li + li:before { content: "» "; }

/** For denoting a path-like structure, GitHub style, e.g.:  <ol class="nav  breadcrumb--path"> <li class=breadcrumb__root><a href=#>inuit.css</a></li> <li><a href=#>inuit.css</a></li> <li><a href=#>partials</a></li> <li class=current><a href=#>objects</a></li> </ol>  */
.breadcrumb--path > li + li:before { content: "/ "; }

/** Assign a delimiter on the fly through a data attribute, e.g.:  <ol class="nav  breadcrumb"> <li><a href=#>Home</a></li> <li data-breadcrumb="|"><a href=#>About</a></li> <li data-breadcrumb="|"><a href=#>The Board</a></li> <li data-breadcrumb="|" class=current><a href=#>Directors</a></li> </ol>  */
.breadcrumb > li + li[data-breadcrumb]:before { content: attr(data-breadcrumb) " "; }

/** Denote the root of the tree. */
.breadcrumb__root { font-weight: bold; }

/*------------------------------------*\ $MEDIA
\*------------------------------------*/
/** Place any image- and text-like content side-by-side, as per: stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code E.g.:  <div class=media> <img src=http://placekitten.com/200/300 alt="" class=media__img> <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p> </div>  Demo: jsfiddle.net/inuitcss/cf4Qs  */
.media { display: block; }

.media__img { float: left; margin-right: 16px; }

/** Reversed image location (right instead of left). */
.media__img--rev { float: right; margin-left: 16px; }

.media__img img, .media__img--rev img { display: block; }

.media__body { overflow: hidden; }

.media__body, .media__body > :last-child { margin-bottom: 0; }

/** `.img`s in `.islet`s need an appropriately sized margin. */
.islet .media__img { margin-right: 8px; }

.islet .media__img--rev { margin-left: 8px; }

/*------------------------------------*\ $MARGINALIA
\*------------------------------------*/
/** Marginalia are, per definition, notes in the margin of a document. The `marginalia__body` class can be applied to all kinds of content, like text or images, and is joined by a width class:  <div class="marginalia"> <div class="marginalia__body  desk-one-fifth"></div> </div>  Demo: jsfiddle.net/inuitcss/AemkH  */
.marginalia { font-size: 12px; font-size: 0.75rem; line-height: 2; }

/** Wait for a certain breakpoint to trigger ‘proper' marginalia. Up to this point, marginalia are inline with the other text. */
@media (min-width: 64em) { .marginalia { position: relative; }
  .marginalia__body, .marginalia__body--right { position: absolute; }
  .marginalia__body { right: 100%; padding-right: 16px; text-align: right; }
  /** Align marginalia to the right of the text. */
  .marginalia__body--right { left: 100%; padding-left: 16px; text-align: left; } }
/*------------------------------------*\ $ISLAND
\*------------------------------------*/
/** Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object E.g.:  <div class=island> I am boxed off. </div>  Demo: jsfiddle.net/inuitcss/u8pV3  */
.island, .islet { display: block; }

.island { padding: 16px; }

.island > :last-child, .islet > :last-child { margin-bottom: 0; }

/** Just like `.island`, only smaller. */
.islet { padding: 8px; }

/*------------------------------------*\ $BLOCK-LIST
\*------------------------------------*/
/** Create big blocky lists of content, e.g.:  <ul class=block-list> <li>Foo</li> <li>Bar</li> <li>Baz</li> <li><a href=# class=block-list__link>Foo Bar Baz</a></li> </ul>  Extend this object in your theme stylesheet.  Demo: jsfiddle.net/inuitcss/hR57q  */
.block-list, .block-list > li { border: 0 solid #ccc; /* Override this color in your theme stylesheet */ }

.block-list { list-style: none; margin-left: 0; border-top-width: 1px; }
.block-list > li { border-bottom-width: 1px; padding: 8px; }

.block-list__link { display: block; padding: 8px; margin: -8px; }

/*------------------------------------*\ $MATRIX
\*------------------------------------*/
/** Create a grid of items out of a single list, e.g.:  <ul class="matrix  three-cols"> <li class=all-cols>Lorem</li> <li>Ipsum <a href=#>dolor</a></li> <li><a href=# class=matrix__link>Sit</a></li> <li>Amet</li> <li class=all-cols>Consectetuer</li> </ul>  Extend this object in your theme stylesheet.  Demo: jsfiddle.net/inuitcss/Y2zrU  */
.matrix, .matrix > li { border: 0 solid #ccc; /* Override this color in your theme stylesheet */ }

.matrix { list-style: none; margin-left: 0; border-top-width: 1px; border-left-width: 1px; }
.matrix > li { padding: 8px; float: left; border-right-width: 1px; border-bottom-width: 1px; }

.matrix__link { display: block; padding: 8px; margin: -8px; }

/** The `.multi-list` object is a lot like the `.matrix` object only without the blocky borders and padding.  <ul class="multi-list  four-cols"> <li>Lorem</li> <li>Ipsum</li> <li>Dolor</li> <li>Sit</li> </ul>  Demo: jsfiddle.net/inuitcss/Y2zrU  */
.multi-list { list-style: none; margin-left: 0; }

.multi-list > li { float: left; }

/** Apply these classes alongside the `.matrix` or `.multi-list` classes on lists to determine how wide their columns are. */
.two-cols > li { width: 50%; }

.three-cols > li { width: 33.333%; }

.four-cols > li { width: 25%; }

.five-cols > li { width: 20%; }

/** Unfortunately we have to qualify this selector in order to bring its specificity above the `.[number]-cols > li` selectors above. */
.matrix > .all-cols, .multi-list > .all-cols { width: 100%; }

/*------------------------------------*\ $SPLIT
\*------------------------------------*/
/** Simple split item for creating two elements floated away from one another, e.g.:  <dl class=split> <dt class=split__title>Burger and fries</dt> <dd>&pound;5.99</dd> <dt class=split__title>Fillet steak</dt> <dd>&pound;19.99</dd> <dt class=split__title>Ice cream</dt> <dd>&pound;2.99</dd> </dl>  <ol class="split  results"> <li class=first><b class=split__title>1st place</b> Bob</li> <li class=second><b class=split__title>2nd place</b> Lilly</li> <li class=third><b class=split__title>3rd place</b> Ted</li> </ol>​  Demo: jsfiddle.net/inuitcss/9gZW7  */
.split { text-align: right; list-style: none; margin-left: 0; }

.split__title { text-align: left; float: left; clear: left; }

/*------------------------------------*\ $THIS-OR-THIS
\*------------------------------------*/
/** Simple options object to provide multiple choices, e.g.:  <h1 class=this-or-this> <a href=# class="this-or-this__this  two-fifths"> Free </a> <span class="this-or-this__or  one-fifth"> or </span> <a href=# class="this-or-this__this  two-fifths"> Pro </a> </h1>  The `.this-or-this__this` and `.this-or-this__or` objects can be sized using the grid-system classes.  Demo: jsfiddle.net/inuitcss/R3sks  */
.this-or-this { display: table; width: 100%; text-align: center; }

.this-or-this__this, .this-or-this__or { display: table-cell; vertical-align: middle; }

/*------------------------------------*\ $LINK-COMPLEX
\*------------------------------------*/
/** As inspired by @necolas: github.com/necolas/suit-utils/blob/master/link.css#L18  Add hover behaviour to only selected items within links, e.g.:  <a href=log-in class=link-complex> <i class="s  s--user"></i> <span class=link-complex__target>Log in</span> </a>  Demo: jsfiddle.net/inuitcss/rt9M3  */
.link-complex, .link-complex:hover, .link-complex:active, .link-complex:focus { text-decoration: none; }

.link-complex:hover .link-complex__target, .link-complex:active .link-complex__target, .link-complex:focus .link-complex__target { text-decoration: underline; }

/*------------------------------------*\ $FLYOUT
\*------------------------------------*/
/** Flyouts are pieces of content that fly out of a parent when said parent is hovered. They typically appear bottom-left of the parent.  <div class=flyout> Foo <div class=flyout__content> <h1>Lorem</h1> <p>Ipsum</p> </div> </div>  Extend these objects in your theme stylesheet.  Demo: jsfiddle.net/inuitcss/B52HG  */
.flyout, .flyout--alt { position: relative; overflow: hidden; }

.flyout__content { /** Position the flyouts off-screen. This is typically better than `display:none;`. */ position: absolute; top: 100%; left: -99999px; }

/** Bring the flyouts into view when you hover their parents. Two different types of flyout; ‘regular’ (`.flyout`) and ‘alternative’ (`.flyout--alt`). */
.flyout:hover, .flyout--alt:hover { overflow: visible; }

/** Regular flyouts sit all the way from the top, flush left. */
.flyout:hover > .flyout__content { left: 0; }

/** Alternative flyouts sit all the way from the left, flush top. */
.flyout--alt:hover > .flyout__content { top: 0; left: 100%; }

/*------------------------------------*\ $ARROWS
\*------------------------------------*/
/** It is a common design treatment to give an element a triangular points-out arrow, we typically build these with CSS. These following classes allow us to generate these arbitrarily with a mixin, `@arrow()`. */
/** Forms the basis for any/all CSS arrows. */
/** Define individual edges so we can combine what we need, when we need. */
/*------------------------------------*\ $SPRITE
\*------------------------------------*/
/** Giving an element a class of `.s` will throw it into ‘sprite’ mode and apply a background image e.g.:  <a class="s  s--question-mark">More info&hellip;</a>  or  <a href=#><i class="s  s--question-mark"></i> Help and FAQ</a>  Giving an element a class of `.i` will throw it into ‘icon’ mode and will not add a background, but should be used for icon fonts and is populated through a `data-icon` attribute and the `:after` pseudo-element, e.g.:  <a href=#><i class=i data-icon="&#xF000;"></i> View your favourites</a>  Where ‘&#xF000;’ might map to a star in your particular font.  These all require extension in your theme stylesheet.  Demo: jsfiddle.net/inuitcss/6TKuS  */
.s, .i { display: inline-block; line-height: 1; position: relative; vertical-align: middle; zoom: 1; /** So using `.i` on certain elements doesn’t make a visual difference. */ font-style: normal; font-weight: normal; /** So icons added using `.i` sit in the centre of the element. */ text-align: center; }

.s { background-image: url(/path/to/your/sprite.png); /** The typical size of most icons. Override in your theme stylesheet. */ width: 16px; height: 16px; top: -1px; /* H5BP method image replacement: github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2 */ overflow: hidden; *text-indent: -9999px; }
.s:before { content: ""; display: block; width: 0; height: 100%; }

/** Set up Batch icon font */
.i { font-size: 16px; /** Place the icon in a box the exact same dimensions as the icon itself. */ width: 1em; height: 1em; }
.i:before { content: attr(data-icon); }

/** Icon size modifiers. */
.i--large { font-size: 32px; }

.i--huge { font-size: 64px; }

.i--natural { font-size: inherit; }

/*------------------------------------*\ $ICON-TEXT
\*------------------------------------*/
/** For text-links etc that have an icon with them. Sometimes whitespace would suffice in creating a gap between the icon and text, for example:  <a href=#> <i class="s  s--help"></i> Help &amp; support </a>  However we will sometimes want a larger, explicity set gap: <a href=# class=icon-text> <i class="icon-text__icon  s  s--help"></i>Help &amp; support </a>  Demo: jsfiddle.net/inuitcss/Q6Lbf  */
.icon-text > .icon-text__icon { margin-right: 4px; }

/** We can also reverse the direction of the margin for icons that appear to the right of the text content, thus:  <a href=# class=icon-text--rev> Help &amp; support<i class="icon-text__icon  s  s--help"></i> </a>  */
.icon-text--rev > .icon-text__icon { margin-left: 4px; }

/*------------------------------------*\ $BUTTONS
\*------------------------------------*/
/** Basic button structural styling. Extend in your theme stylesheet.  Demo: jsfiddle.net/inuitcss/RqHcp  */
.btn { font: inherit; cursor: pointer; border: none; display: inline-block; margin: 0; line-height: 1; /** Set padding in ems so we can change the size of a button by merely altering its `font-size`. */ padding: 0.5em; }

.btn, .btn:hover { text-decoration: none; }

/** Basic button modifiers */
.btn--sml { font-size: .75em; }

.btn--lrg { font-size: 1.50em; }

.btn--full { display: block; text-align: center; /** The following is so that `.btn-full` works properly on `input`s as well as `a`s. */ padding-right: 0; padding-left: 0; width: 100%; }

/*------------------------------------*\ $LOZENGES
\*------------------------------------*/
/** Create pill- and lozenge-like runs of text, e.g.:  <p>This <span class=pill>here</span> is a pill!</p>  <p>This <span class=loz>here</span> is also a lozenge!</p>  Pills have fully rounded ends, lozenges have only their corners rounded.  Demo: jsfiddle.net/inuitcss/N3pGm  */
.pill, .loz { display: inline-block; /** These numbers set in ems mean that, at its narrowest, a lozenge will be the same width as the `line-height` set on the `html` element. This allows us to use the `.loz` in almost any `font-size` we wish. */ min-width: 1.0em; padding-right: 0.25em; padding-left: 0.25em; /* =1.50em */ text-align: center; background-color: #ccc; /* Override this color in your theme stylesheet */ color: #fff; /* Override this color in your theme stylesheet */ /** Normally we’d use border-radius:100%; but instead here we just use an overly large number; `border-radius:100%;` would create an oval on non-square elements whereas we just want to round the ends of an element. */ border-radius: 100px; }

.loz { border-radius: 4px; }

/*------------------------------------*\ $RULES
\*------------------------------------*/
/** Horizontal rules, extend `hr`.  Demo: jsfiddle.net/inuitcss/L6GuZ  */
.rule { color: #ccc; /* Sets border color, extend in your theme stylesheet. */ border: none; border-bottom-width: 1px; border-bottom-style: solid; margin-bottom: 15px; margin-bottom: 0.9375rem; }

/** Dotted rules */
.rule--dotted { border-bottom-style: dotted; }

/** Dashed rules */
.rule--dashed { border-bottom-style: dashed; }

/** Ornamental rules. Places a § over the rule. */
.rule--ornament { position: relative; /**
* Pass in an arbitrary ornament though a data attribute, e.g.:
* <hr class="rule  rule--ornament" data-ornament="!">
*
*/ }
.rule--ornament:after { content: "§"; position: absolute; top: 0; right: 0; left: 0; line-height: 0; text-align: center; }
.rule--ornament[data-ornament]:after { content: attr(data-ornament); }

/*------------------------------------*\ $STATS
\*------------------------------------*/
 /** Simple object to display key–value statistic-like information, e.g.:  <div class=stat-group> <dl class=stat> <dt class=stat__title>Tweets</dt> <dd class=stat__value>27,740</dd> </dl>
 <dl class=stat> <dt class=stat__title>Following</dt> <dd class=stat__value>11,529</dd> </dl>
 <dl class=stat> <dt class=stat__title>Followers</dt> <dd class=stat__value>12,105</dd> </dl> </div>  Demo: jsfiddle.net/inuitcss/Bpwu6  */
.stat-group { margin-left: -16px; }

.stat { float: left; margin-left: 16px; display: -ms-flexbox; display: -webkit-flex; display: -moz-flex; display: flex; -webkit-flex-direction: column; -moz-flex-direction: column; -ms-flex-direction: column; -o-flex-direction: column; flex-direction: column; }

.stat__title { -webkit-order: 2; -moz-order: 2; -ms-order: 2; -o-order: 2; order: 2; -ms-flex-order: 2; }

.stat__value { margin-left: 0; -webkit-order: 1; -moz-order: 1; -ms-order: 1; -o-order: 1; order: 1; -ms-flex-order: 1; }

/*------------------------------------*\ $GREYBOX
\*------------------------------------*/
/** Quickly throw together greybox wireframes. Use in conjunction with other inuit.css objects to create simple greybox prototypes, e.g.:  <div class="island  greybox  greybox--medium">Header</div>
 <ul class="nav  nav--fit  nav--block  greybox"> <li><a href=#>Home</a></li> <li><a href=#>About</a></li> <li><a href=#>Portfolio</a></li> <li><a href=#>Contact</a></li> </ul>  The beauty of combining the greyboxing with inuit.css objects is that any prototyping can quickly be converted into/used as production code.  For a more complete prototyping framework, consider Adam Whitcroft’s Proto: adamwhitcroft.com/proto  Demo: jsfiddle.net/inuitcss/qCXfh/  */
.greybox, .graybox { font-size: 12px; font-size: 0.75rem; line-height: 2; font-family: sans-serif; text-align: center; background-color: rgba(0, 0, 0, 0.2); color: #fff; }

.greybox a, .graybox a { color: #fff; text-decoration: underline; }

/** All greyboxes will occupy 100% of their parent’s width, but to alter their heights we apply incrementally larger line-heights: */
.greybox--small, .graybox--small { line-height: 48px; }

.greybox--medium, .graybox--medium { line-height: 96px; }

.greybox--large, .graybox--large { line-height: 192px; }

.greybox--huge, .graybox--huge { line-height: 384px; }

.greybox--gigantic, .graybox--gigantic { line-height: 768px; }

/*------------------------------------*\ $BATCH
\*------------------------------------*/
/** Style trumps; helper and brand classes */
/*------------------------------------*\ $WIDTHS
\*------------------------------------*/
/** Sizes in human readable format. These are used in conjunction with other objects and abstractions found in inuit.css, most commonly the grid system and faux flexbox.  We have a mixin to generate our widths and their breakpoint-specific variations. */
/**
* Whole
*/
.one-whole { width: 100%; }

/**
* Halves
*/
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths { width: 50%; }

/**
* Thirds
*/
.one-third, .two-sixths, .four-twelfths { width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths { width: 66.666%; }

/**
* Quarters
*/
.one-quarter, .two-eighths, .three-twelfths { width: 25%; }

.three-quarters, .six-eighths, .nine-twelfths { width: 75%; }

/**
* Fifths
*/
.one-fifth, .two-tenths { width: 20%; }

.two-fifths, .four-tenths { width: 40%; }

.three-fifths, .six-tenths { width: 60%; }

.four-fifths, .eight-tenths { width: 80%; }

/**
* Sixths
*/
.one-sixth, .two-twelfths { width: 16.666%; }

.five-sixths, .ten-twelfths { width: 83.333%; }

/**
* Eighths
*/
.one-eighth { width: 12.5%; }

.three-eighths { width: 37.5%; }

.five-eighths { width: 62.5%; }

.seven-eighths { width: 87.5%; }

/**
* Tenths
*/
.one-tenth { width: 10%; }

.three-tenths { width: 30%; }

.seven-tenths { width: 70%; }

.nine-tenths { width: 90%; }

/**
* Twelfths
*/
.one-twelfth { width: 8.333%; }

.five-twelfths { width: 41.666%; }

.seven-twelfths { width: 58.333%; }

.eleven-twelfths { width: 91.666%; }

/** If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have access to these classes. You can define at which breakpoint you’d like an element to be a certain size, e.g.:  `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`  This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the horizontal space, a half of that space at ‘tablet’ sizes, and goes full width at ‘mobile’ sizes.  Demo: jsfiddle.net/inuitcss/WS4Ge  */
@media only screen and (min-width: 30em) { /** Whole */
  .b30-one-whole { width: 100%; }
  /** Halves */
  .b30-one-half, .b30-two-quarters, .b30-three-sixths, .b30-four-eighths, .b30-five-tenths, .b30-six-twelfths { width: 50%; }
  /** Thirds */
  .b30-one-third, .b30-two-sixths, .b30-four-twelfths { width: 33.333%; }
  .b30-two-thirds, .b30-four-sixths, .b30-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b30-one-quarter, .b30-two-eighths, .b30-three-twelfths { width: 25%; }
  .b30-three-quarters, .b30-six-eighths, .b30-nine-twelfths { width: 75%; }
  /** Fifths */
  .b30-one-fifth, .b30-two-tenths { width: 20%; }
  .b30-two-fifths, .b30-four-tenths { width: 40%; }
  .b30-three-fifths, .b30-six-tenths { width: 60%; }
  .b30-four-fifths, .b30-eight-tenths { width: 80%; }
  /** Sixths */
  .b30-one-sixth, .b30-two-twelfths { width: 16.666%; }
  .b30-five-sixths, .b30-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b30-one-eighth { width: 12.5%; }
  .b30-three-eighths { width: 37.5%; }
  .b30-five-eighths { width: 62.5%; }
  .b30-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b30-one-tenth { width: 10%; }
  .b30-three-tenths { width: 30%; }
  .b30-seven-tenths { width: 70%; }
  .b30-nine-tenths { width: 90%; }
  /** Twelfths */
  .b30-one-twelfth { width: 8.333%; }
  .b30-five-twelfths { width: 41.666%; }
  .b30-seven-twelfths { width: 58.333%; }
  .b30-eleven-twelfths { width: 91.666%; } }
@media only screen and (min-width: 40em) { /** Whole */
  .b40-one-whole { width: 100%; }
  /** Halves */
  .b40-one-half, .b40-two-quarters, .b40-three-sixths, .b40-four-eighths, .b40-five-tenths, .b40-six-twelfths { width: 50%; }
  /** Thirds */
  .b40-one-third, .b40-two-sixths, .b40-four-twelfths { width: 33.333%; }
  .b40-two-thirds, .b40-four-sixths, .b40-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b40-one-quarter, .b40-two-eighths, .b40-three-twelfths { width: 25%; }
  .b40-three-quarters, .b40-six-eighths, .b40-nine-twelfths { width: 75%; }
  /** Fifths */
  .b40-one-fifth, .b40-two-tenths { width: 20%; }
  .b40-two-fifths, .b40-four-tenths { width: 40%; }
  .b40-three-fifths, .b40-six-tenths { width: 60%; }
  .b40-four-fifths, .b40-eight-tenths { width: 80%; }
  /** Sixths */
  .b40-one-sixth, .b40-two-twelfths { width: 16.666%; }
  .b40-five-sixths, .b40-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b40-one-eighth { width: 12.5%; }
  .b40-three-eighths { width: 37.5%; }
  .b40-five-eighths { width: 62.5%; }
  .b40-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b40-one-tenth { width: 10%; }
  .b40-three-tenths { width: 30%; }
  .b40-seven-tenths { width: 70%; }
  .b40-nine-tenths { width: 90%; }
  /** Twelfths */
  .b40-one-twelfth { width: 8.333%; }
  .b40-five-twelfths { width: 41.666%; }
  .b40-seven-twelfths { width: 58.333%; }
  .b40-eleven-twelfths { width: 91.666%; } }
@media only screen and (min-width: 50em) { /** Whole */
  .b50-one-whole { width: 100%; }
  /** Halves */
  .b50-one-half, .b50-two-quarters, .b50-three-sixths, .b50-four-eighths, .b50-five-tenths, .b50-six-twelfths { width: 50%; }
  /** Thirds */
  .b50-one-third, .b50-two-sixths, .b50-four-twelfths { width: 33.333%; }
  .b50-two-thirds, .b50-four-sixths, .b50-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b50-one-quarter, .b50-two-eighths, .b50-three-twelfths { width: 25%; }
  .b50-three-quarters, .b50-six-eighths, .b50-nine-twelfths { width: 75%; }
  /** Fifths */
  .b50-one-fifth, .b50-two-tenths { width: 20%; }
  .b50-two-fifths, .b50-four-tenths { width: 40%; }
  .b50-three-fifths, .b50-six-tenths { width: 60%; }
  .b50-four-fifths, .b50-eight-tenths { width: 80%; }
  /** Sixths */
  .b50-one-sixth, .b50-two-twelfths { width: 16.666%; }
  .b50-five-sixths, .b50-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b50-one-eighth { width: 12.5%; }
  .b50-three-eighths { width: 37.5%; }
  .b50-five-eighths { width: 62.5%; }
  .b50-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b50-one-tenth { width: 10%; }
  .b50-three-tenths { width: 30%; }
  .b50-seven-tenths { width: 70%; }
  .b50-nine-tenths { width: 90%; }
  /** Twelfths */
  .b50-one-twelfth { width: 8.333%; }
  .b50-five-twelfths { width: 41.666%; }
  .b50-seven-twelfths { width: 58.333%; }
  .b50-eleven-twelfths { width: 91.666%; } }
@media only screen and (min-width: 60em) { /** Whole */
  .b60-one-whole { width: 100%; }
  /** Halves */
  .b60-one-half, .b60-two-quarters, .b60-three-sixths, .b60-four-eighths, .b60-five-tenths, .b60-six-twelfths { width: 50%; }
  /** Thirds */
  .b60-one-third, .b60-two-sixths, .b60-four-twelfths { width: 33.333%; }
  .b60-two-thirds, .b60-four-sixths, .b60-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b60-one-quarter, .b60-two-eighths, .b60-three-twelfths { width: 25%; }
  .b60-three-quarters, .b60-six-eighths, .b60-nine-twelfths { width: 75%; }
  /** Fifths */
  .b60-one-fifth, .b60-two-tenths { width: 20%; }
  .b60-two-fifths, .b60-four-tenths { width: 40%; }
  .b60-three-fifths, .b60-six-tenths { width: 60%; }
  .b60-four-fifths, .b60-eight-tenths { width: 80%; }
  /** Sixths */
  .b60-one-sixth, .b60-two-twelfths { width: 16.666%; }
  .b60-five-sixths, .b60-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b60-one-eighth { width: 12.5%; }
  .b60-three-eighths { width: 37.5%; }
  .b60-five-eighths { width: 62.5%; }
  .b60-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b60-one-tenth { width: 10%; }
  .b60-three-tenths { width: 30%; }
  .b60-seven-tenths { width: 70%; }
  .b60-nine-tenths { width: 90%; }
  /** Twelfths */
  .b60-one-twelfth { width: 8.333%; }
  .b60-five-twelfths { width: 41.666%; }
  .b60-seven-twelfths { width: 58.333%; }
  .b60-eleven-twelfths { width: 91.666%; } }
@media only screen and (min-width: 70em) { /** Whole */
  .b70-one-whole { width: 100%; }
  /** Halves */
  .b70-one-half, .b70-two-quarters, .b70-three-sixths, .b70-four-eighths, .b70-five-tenths, .b70-six-twelfths { width: 50%; }
  /** Thirds */
  .b70-one-third, .b70-two-sixths, .b70-four-twelfths { width: 33.333%; }
  .b70-two-thirds, .b70-four-sixths, .b70-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b70-one-quarter, .b70-two-eighths, .b70-three-twelfths { width: 25%; }
  .b70-three-quarters, .b70-six-eighths, .b70-nine-twelfths { width: 75%; }
  /** Fifths */
  .b70-one-fifth, .b70-two-tenths { width: 20%; }
  .b70-two-fifths, .b70-four-tenths { width: 40%; }
  .b70-three-fifths, .b70-six-tenths { width: 60%; }
  .b70-four-fifths, .b70-eight-tenths { width: 80%; }
  /** Sixths */
  .b70-one-sixth, .b70-two-twelfths { width: 16.666%; }
  .b70-five-sixths, .b70-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b70-one-eighth { width: 12.5%; }
  .b70-three-eighths { width: 37.5%; }
  .b70-five-eighths { width: 62.5%; }
  .b70-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b70-one-tenth { width: 10%; }
  .b70-three-tenths { width: 30%; }
  .b70-seven-tenths { width: 70%; }
  .b70-nine-tenths { width: 90%; }
  /** Twelfths */
  .b70-one-twelfth { width: 8.333%; }
  .b70-five-twelfths { width: 41.666%; }
  .b70-seven-twelfths { width: 58.333%; }
  .b70-eleven-twelfths { width: 91.666%; } }
@media only screen and (min-width: 80em) { /** Whole */
  .b80-one-whole { width: 100%; }
  /** Halves */
  .b80-one-half, .b80-two-quarters, .b80-three-sixths, .b80-four-eighths, .b80-five-tenths, .b80-six-twelfths { width: 50%; }
  /** Thirds */
  .b80-one-third, .b80-two-sixths, .b80-four-twelfths { width: 33.333%; }
  .b80-two-thirds, .b80-four-sixths, .b80-eight-twelfths { width: 66.666%; }
  /** Quarters */
  .b80-one-quarter, .b80-two-eighths, .b80-three-twelfths { width: 25%; }
  .b80-three-quarters, .b80-six-eighths, .b80-nine-twelfths { width: 75%; }
  /** Fifths */
  .b80-one-fifth, .b80-two-tenths { width: 20%; }
  .b80-two-fifths, .b80-four-tenths { width: 40%; }
  .b80-three-fifths, .b80-six-tenths { width: 60%; }
  .b80-four-fifths, .b80-eight-tenths { width: 80%; }
  /** Sixths */
  .b80-one-sixth, .b80-two-twelfths { width: 16.666%; }
  .b80-five-sixths, .b80-ten-twelfths { width: 83.333%; }
  /** Eighths */
  .b80-one-eighth { width: 12.5%; }
  .b80-three-eighths { width: 37.5%; }
  .b80-five-eighths { width: 62.5%; }
  .b80-seven-eighths { width: 87.5%; }
  /** Tenths */
  .b80-one-tenth { width: 10%; }
  .b80-three-tenths { width: 30%; }
  .b80-seven-tenths { width: 70%; }
  .b80-nine-tenths { width: 90%; }
  /** Twelfths */
  .b80-one-twelfth { width: 8.333%; }
  .b80-five-twelfths { width: 41.666%; }
  .b80-seven-twelfths { width: 58.333%; }
  .b80-eleven-twelfths { width: 91.666%; } }
/* endif */
/*------------------------------------*\ $PUSH
\*------------------------------------*/
/** Push classes, to move grid items over to the right by certain amounts. */
/** Not a particularly great selector, but the DRYest way to do things. */
[class*="push--"] { position: relative; }

/** Whole */
.push--one-whole { left: 100%; }

/** Halves */
.push--one-half, .push--two-quarters, .push--three-sixths, .push--four-eighths, .push--five-tenths, .push--six-twelfths { left: 50%; }

/** Thirds */
.push--one-third, .push--two-sixths, .push--four-twelfths { left: 33.333%; }

.push--two-thirds, .push--four-sixths, .push--eight-twelfths { left: 66.666%; }

/** Quarters */
.push--one-quarter, .push--two-eighths, .push--three-twelfths { left: 25%; }

.push--three-quarters, .push--six-eighths, .push--nine-twelfths { left: 75%; }

/** Fifths */
.push--one-fifth, .push--two-tenths { left: 20%; }

.push--two-fifths, .push--four-tenths { left: 40%; }

.push--three-fifths, .push--six-tenths { left: 60%; }

.push--four-fifths, .push--eight-tenths { left: 80%; }

/** Sixths */
.push--one-sixth, .push--two-twelfths { left: 16.666%; }

.push--five-sixths, .push--ten-twelfths { left: 83.333%; }

/** Eighths */
.push--one-eighth { left: 12.5%; }

.push--three-eighths { left: 37.5%; }

.push--five-eighths { left: 62.5%; }

.push--seven-eighths { left: 87.5%; }

/** Tenths */
.push--one-tenth { left: 10%; }

.push--three-tenths { left: 30%; }

.push--seven-tenths { left: 70%; }

.push--nine-tenths { left: 90%; }

/** Twelfths */
.push--one-twelfth { left: 8.333%; }

.push--five-twelfths { left: 41.666%; }

.push--seven-twelfths { left: 58.333%; }

.push--eleven-twelfths { left: 91.666%; }

/* endif */
/*------------------------------------*\ $PULL
\*------------------------------------*/
/** Pull classes, to move grid items over to the right by certain amounts. */
/** Not a particularly great selector, but the DRYest way to do things. */
[class*="pull--"] { position: relative; }

/** Whole */
.pull--one-whole { right: 100%; }

/** Halves */
.pull--one-half, .pull--two-quarters, .pull--three-sixths, .pull--four-eighths, .pull--five-tenths, .pull--six-twelfths { right: 50%; }

/** Thirds */
.pull--one-third, .pull--two-sixths, .pull--four-twelfths { right: 33.333%; }

.pull--two-thirds, .pull--four-sixths, .pull--eight-twelfths { right: 66.666%; }

/** Quarters */
.pull--one-quarter, .pull--two-eighths, .pull--three-twelfths { right: 25%; }

.pull--three-quarters, .pull--six-eighths, .pull--nine-twelfths { right: 75%; }

/** Fifths */
.pull--one-fifth, .pull--two-tenths { right: 20%; }

.pull--two-fifths, .pull--four-tenths { right: 40%; }

.pull--three-fifths, .pull--six-tenths { right: 60%; }

.pull--four-fifths, .pull--eight-tenths { right: 80%; }

/** Sixths */
.pull--one-sixth, .pull--two-twelfths { right: 16.666%; }

.pull--five-sixths, .pull--ten-twelfths { right: 83.333%; }

/** Eighths */
.pull--one-eighth { right: 12.5%; }

.pull--three-eighths { right: 37.5%; }

.pull--five-eighths { right: 62.5%; }

.pull--seven-eighths { right: 87.5%; }

/** Tenths */
.pull--one-tenth { right: 10%; }

.pull--three-tenths { right: 30%; }

.pull--seven-tenths { right: 70%; }

.pull--nine-tenths { right: 90%; }

/** Twelfths */
.pull--one-twelfth { right: 8.333%; }

.pull--five-twelfths { right: 41.666%; }

.pull--seven-twelfths { right: 58.333%; }

.pull--eleven-twelfths { right: 91.666%; }

/* endif */
/*------------------------------------*\ $BRAND
\*------------------------------------*/
/** `.brand` is a quick and simple way to apply your brand face and/or color to any element using a handy helper class. */
.brand { font-family: "Helvetica Neue", sans-serif!important; color: #4a8ec2!important; }

.brand-face { font-family: "Helvetica Neue", sans-serif!important; }

.brand-color, .brand-colour { color: #4a8ec2!important; }

/*------------------------------------*\ $HELPER
\*------------------------------------*/
/** A series of helper classes to use arbitrarily. Only use a helper class if an element/component doesn’t already have a class to which you could apply this styling, e.g. if you need to float `.main-nav` left then add `float:left;` to that ruleset as opposed to adding the `.float--left` class to the markup.  A lot of these classes carry `!important` as you will always want them to win out over other selectors. */
.float--right { float: right!important; }

.float--left { float: left !important; }

.text--left { text-align: left  !important; }

.text--center { text-align: center!important; }

.text--right { text-align: right !important; }

.flush { margin: 0!important; }

.flush--top { margin-top: 0!important; }

.flush--right { margin-right: 0!important; }

.flush--bottom { margin-bottom: 0!important; }

.flush--left { margin-left: 0!important; }

.flush--ends { margin-top: 0!important; margin-bottom: 0!important; }

.flush--sides { margin-right: 0!important; margin-left: 0!important; }

/** Pull items full width of `.island` parents. */
.full-bleed { margin-right: -16px !important; margin-left: -16px !important; }
.islet .full-bleed { margin-right: -8px !important; margin-left: -8px !important; }

/** Add a help cursor to any element that gives the user extra information on `:hover`. */
.informative { cursor: help; }

/** Mute an object by reducing its opacity. */
.muted { opacity: 0.5; filter: alpha(opacity=50); }

/** Align items to the right where they imply progression/movement forward, e.g.:  <p class=proceed><a href=#>Read more...</a></p>  */
.proceed { text-align: right; }

/** Add a right-angled quote to links that imply movement, e.g.:  <a href=# class=go>Read more</a>  */
.go:after { content: " »"; }

/** Apply capital case to an element (usually a `strong`). */
.caps { text-transform: uppercase; }

/** Hide content off-screen without resorting to `display:none;` */
.accessibility { position: absolute; left: -99999px; }

[dir=rtl] .accessibility { left: auto; right: -99999px; }

/** Hide content based on breakpoint */
.hide { position: absolute; left: -9999px; }

@media only screen and (min-width: palm) { .hide--palm { position: absolute; left: -9999px; } }
@media only screen and (min-width: lap) { .hide--lap { position: absolute; left: -9999px; } }
@media only screen and (min-width: lap-and-up) { .hide--lap-and-up { position: absolute; left: -9999px; } }
@media only screen and (min-width: portable) { .hide--portable { position: absolute; left: -9999px; } }
@media only screen and (min-width: desk) { .hide--desk { position: absolute; left: -9999px; } }
@media only screen and (min-width: desk-wide) { .hide--desk-wide { position: absolute; left: -9999px; } }
/* endif */
/** She’s all yours, cap’n... Begin importing your stuff here. */
body { font-size: 16px; }
